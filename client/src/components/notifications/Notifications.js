import "./Notifications.css";
import { FaBell, FaCheckCircle, FaSpinner } from "react-icons/fa"; // Import FaSpinner
import { useNotification } from "../../context/NotifiacationContext";
import { useEffect, useCallback, useRef } from "react"; // Th√™m useCallback v√† useRef

const Notifications = () => {
    // L·∫•y c√°c state v√† h√†m t·ª´ context ƒë√£ ƒë∆∞·ª£c c·∫£i ti·∫øn
    const {
        notifications,
        getNotifications,
        markNotificationRead,
        markAllNotificationsRead,
        loading,  // L·∫•y tr·∫°ng th√°i loading
        hasMore,  // L·∫•y tr·∫°ng th√°i hasMore
        // unread // B·∫°n c√≥ th·ªÉ l·∫•y tr·∫°ng th√°i unread n·∫øu mu·ªën hi·ªÉn th·ªã
    } = useNotification();

    // console.log(notifications); // C√≥ th·ªÉ b·ªè d√≤ng n√†y n·∫øu kh√¥ng c·∫ßn debug n·ªØa

    // H√†m x·ª≠ l√Ω vi·ªác ƒë√°nh d·∫•u m·ªôt th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
    // S·ª≠ d·ª•ng useCallback ƒë·ªÉ memoize h√†m n√†y
    const markAsRead = useCallback(async (id) => {
        await markNotificationRead(id);
    }, [markNotificationRead]); // Dependency l√† markNotificationRead t·ª´ context

    // H√†m x·ª≠ l√Ω vi·ªác ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
    // S·ª≠ d·ª•ng useCallback ƒë·ªÉ memoize h√†m n√†y
    const markAllRead = useCallback(async () => {
        await markAllNotificationsRead();
    }, [markAllNotificationsRead]); // Dependency l√† markAllNotificationsRead t·ª´ context

    // ** OPTION 1: Infinite Scrolling (Cu·ªôn v√¥ h·∫°n) **
    // Ref ƒë·ªÉ theo d√µi element cu·ªëi c√πng trong danh s√°ch
    const loader = useRef(null);

    useEffect(() => {
        // Observer callback: Khi ph·∫ßn t·ª≠ loader xu·∫•t hi·ªán trong viewport
        const handleObserver = (entries) => {
            const target = entries[0];
            if (target.isIntersecting && hasMore && !loading) {
                console.log("Loading more notifications triggered by scroll...");
                getNotifications(); // G·ªçi h√†m ƒë·ªÉ t·∫£i th√™m th√¥ng b√°o
            }
        };

        // T·∫°o Intersection Observer
        const observer = new IntersectionObserver(handleObserver, {
            root: null, // theo d√µi viewport
            rootMargin: "200px", // t·∫£i tr∆∞·ªõc 200px khi ng∆∞·ªùi d√πng c√≤n c√°ch cu·ªëi trang
            threshold: 1.0,
        });

        // B·∫Øt ƒë·∫ßu quan s√°t ph·∫ßn t·ª≠ loader
        if (loader.current) {
            observer.observe(loader.current);
        }

        // Cleanup function: Ng·ª´ng quan s√°t khi component unmount
        return () => {
            if (loader.current) {
                observer.unobserve(loader.current);
            }
        };
    }, [hasMore, loading, getNotifications]); // Dependencies c·ªßa useEffect


    // H√†m ƒë·ªãnh d·∫°ng th·ªùi gian (c√≥ th·ªÉ ƒë·∫∑t ·ªü m·ªôt utility file ri√™ng)
    const formatTime = (isoString) => {
        const date = new Date(isoString);
        // T√πy ch·ªânh ƒë·ªãnh d·∫°ng theo √Ω mu·ªën, v√≠ d·ª•: "DD/MM/YYYY HH:mm"
        const options = {
            year: 'numeric',
            month: 'numeric',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            hour12: false // 24-hour format
        };
        return new Intl.DateTimeFormat('vi-VN', options).format(date);
    };

    return (
        <div className="notifications-container">
            <div className="notifications-header">
                <h2><FaBell style={{ marginRight: "10px" }} />Notification</h2>
                {/* N√∫t "ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc" */}
                {notifications.length > 0 && (
                    <button className="mark-all-read-btn" onClick={markAllRead} disabled={loading}>
                        Mark all read <FaCheckCircle />
                    </button>
                )}
            </div>

            <ul className="notifications-list">
                {notifications.length === 0 && !loading && !hasMore ? ( // Hi·ªÉn th·ªã khi kh√¥ng c√≥ th√¥ng b√°o v√† ƒë√£ t·∫£i xong
                    <p className="no-notifications">B·∫°n ƒë√£ xem h·∫øt th√¥ng b√°o r·ªìi! üéâ</p>
                ) : (
                    notifications.map(notification => (
                        <li
                            key={notification.id}
                            className={`notification-item ${notification.is_read ? 'read' : ''}`}
                        >
                            <div className="notification-content">
                                <p className="notification-title">{notification.notification_title}</p>
                                <p className="notification-message">{notification.notification_message}</p>
                            </div>
                            <div className="notification-actions">
                                {/* ƒê·ªãnh d·∫°ng th·ªùi gian t·∫°o */}
                                <small className="notification-time">{formatTime(notification.created_at)}</small>
                                {/* Ch·ªâ hi·ªÉn th·ªã n√∫t "ƒê√£ ƒë·ªçc" n·∫øu ch∆∞a ƒë·ªçc */}
                                {!notification.is_read && (
                                    <FaCheckCircle
                                        className="mark-read"
                                        onClick={() => markAsRead(notification.id)}
                                        title="ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc"
                                    />
                                )}
                            </div>
                        </li>
                    ))
                )}
                {/* Hi·ªÉn th·ªã spinner khi ƒëang t·∫£i th√™m */}
                {loading && (
                    <li className="loading-indicator">
                        <FaSpinner className="spinner" /> ƒêang t·∫£i...
                    </li>
                )}
                {/* Hi·ªÉn th·ªã th√¥ng b√°o khi h·∫øt d·ªØ li·ªáu v√† kh√¥ng c√≤n loading */}
                {!hasMore && !loading && notifications.length > 0 && (
                    <li className="no-more-notifications">
                        You have viewed all notifications.</li>
                )}
            </ul>

            {/* Ph·∫ßn t·ª≠ d√πng ƒë·ªÉ k√≠ch ho·∫°t "load more" khi cu·ªôn */}
            {/* Ch·ªâ hi·ªÉn th·ªã n·∫øu c√≤n c√≥ th·ªÉ t·∫£i th√™m */}
            {hasMore && !loading && (
                <div ref={loader} style={{ height: "20px", margin: "10px 0" }}></div>
            )}

            {/* ** OPTION 2: "Load More" Button (N·∫øu kh√¥ng d√πng cu·ªôn v√¥ h·∫°n) **
            {hasMore && !loading && notifications.length > 0 && (
                <button onClick={getNotifications} className="load-more-btn">
                    T·∫£i th√™m th√¥ng b√°o
                </button>
            )}
            {loading && notifications.length > 0 && (
                <button disabled className="load-more-btn">
                    <FaSpinner className="spinner" /> ƒêang t·∫£i...
                </button>
            )}
            */}
        </div>
    );
};

export default Notifications;