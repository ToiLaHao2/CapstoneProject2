// socket.js
const { Server } = require("socket.io");
const { VerifiedToken } = require("../utils/authHelpers");
const { removeSocket, addUser, onlineUsers } = require("../utils/onlineUser");

let io;                                // bi·∫øn gi·ªØ instance to√†n c·ª•c

/**
 * Kh·ªüi t·∫°o Socket.IO ‚Äì g·ªçi ƒë√∫ng **m·ªôt l·∫ßn** trong server.js
 * @param {http.Server} server  instance http.createServer(app)
 */
function initSocket(server) {
    io = new Server(server, {
        cors: { origin: "*" },
        transports: ["websocket", "polling"],
    });

    /* ---- middleware x√°c th·ª±c ng·∫Øn g·ªçn ---- */
    io.use((socket, next) => {
        const token = socket.handshake.auth?.token;
        if (!token) return next(new Error("Unauthorized"));
        // TODO: verify token & g·∫Øn socket.user
        next();
    });

    /* ---- s·ª± ki·ªán connection ---- */
    io.on("connection", async (socket) => {
        console.log("üîå New client:", socket.id);
        const getId = await VerifiedToken(socket.handshake.auth.token);
        console.log("üë§ User connected:", getId.id);

        // th√™m th√¥ng tin ng∆∞·ªùi d√πng v√†o online users
        addUser(getId.id, socket.id);

        // console.log("üó∫Ô∏è Online users:", onlineUsers.get("68495e4d83ed810c6b1c33a8"));

        socket.on("disconnect", () => {
            // xo√° th√¥ng tin ng∆∞·ªùi d√πng kh·ªèi online users
            removeSocket(socket.id);
            console.log("‚ùå Client disconnected:", socket.id);
        });
    });

    return io;            // tr·∫£ v·ªÅ cho server.js n·∫øu c·∫ßn
}

/** L·∫•y l·∫°i instance io ·ªü b·∫•t c·ª© ƒë√¢u (controller, service‚Ä¶) */
function getIO() {
    if (!io) throw new Error("Socket.io ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
    return io;
}

module.exports = { initSocket, getIO };
